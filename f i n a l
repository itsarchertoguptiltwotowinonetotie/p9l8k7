package db_cms;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.awt.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.*;
import java.util.Date;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
class Student {
    String username, password, name;
    double walletBalance;
    ArrayList<String> purchaseHistory;
    public Student(String username, String password, String name, double initialBalance) {
        this.name = name;
        this.username = username;
        this.password = password;
        this.walletBalance = initialBalance;
        this.purchaseHistory = new ArrayList<>();
    }
}
class AdminModule {
    static HashMap<String, Student> students = new HashMap<>();
    static HashMap<String, Double> menu = new HashMap<>();

    static {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");

            Statement smt = con.createStatement();
            ResultSet rs = smt.executeQuery("select * from students");

            while (rs.next()) {
            	students.put(rs.getString(1),new Student(rs.getString(1),rs.getString(2),rs.getString(3),rs.getDouble(1)));
            }

        } catch (Exception e1) {
            System.out.println(e1);
        }

        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");

            Statement smt = con.createStatement();
            ResultSet rs = smt.executeQuery("select * from menuitems");

            while (rs.next()) {
            	menu.put(rs.getString(1), rs.getDouble(2));
            }

        } catch (Exception e1) {
            System.out.println(e1);
        }
    }
}
class StudentModule extends JPanel {
    private String selectedStudent;
    JPanel head, menu, details, panel,panel2;
    JFrame frame;
    public String s1;
    public StudentModule(String s1) {
        selectedStudent = s1;
        setSize(1500, 1100);
        setLayout(null);
        JButton details = new JButton("Student Details");
        details.setBounds(200, 100, 500, 75);
        details.addActionListener(e -> StudentPage());
        add(details);
        JButton viewBalance= new JButton("view Balance");
        viewBalance.setBounds(200, 300, 500, 75);
        viewBalance.addActionListener(e -> viewBalance());
        add(viewBalance);
        JButton viewPurchaseHistory= new JButton("view Purchase History");
        viewPurchaseHistory.setBounds(200, 500, 500, 75);
        viewPurchaseHistory.addActionListener(e -> viewHistory());
        add(viewPurchaseHistory);
        setVisible(true);
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
            PreparedStatement preparedStatement = con.prepareStatement("SELECT * FROM students WHERE username = ?");
            preparedStatement.setString(1, selectedStudent);
            ResultSet rs1 = preparedStatement.executeQuery();
            while(rs1.next()) {
            String st =(rs1.getString(3));
            }
        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(this, "Invalid Student username");
            
        } 
        setBackground(new Color(240, 248, 255));
        Font buttonFont = new Font("Segoe UI", Font.BOLD, 14);
        
        setVisible(true);
    }
    private JButton createStyledButton(String text, Font font, int x, int y) {
        JButton button = new JButton(text);
        button.setFont(font);
        button.setBounds(x, y, 200, 40);
        button.setBackground(new Color(135, 206, 235));
        button.setForeground(Color.WHITE); 
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(new Color(70, 130, 180), 2, true)); 
        button.setCursor(new Cursor(Cursor.HAND_CURSOR)); 
        button.setToolTipText("Click to " + text); 
        return button;
    }
    private void viewBalance() { 
    	JLabel s1 = new JLabel("   ");
    	s1.setBounds(560, 252, 800, 100);
    	s1.setFont(new Font("Arial", Font.BOLD, 75));
    	JLabel s2 = new JLabel("Current Balance is");
    	s2.setBounds(35, 250, 800, 100);
    	s2.setFont(new Font("Arial", Font.BOLD, 55));
    	s1.setForeground(Color.green);
    	JPanel p1 = new JPanel();
    	p1.setLayout(null);
    	p1.setBackground(new Color(240, 248, 255));
    	p1.setPreferredSize(new Dimension(1050, 150));
    	p1.add(s1);
    	p1.add(s2);
    	frame.add(p1);
        if (selectedStudent != null) {
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                 PreparedStatement preparedStatement = con.prepareStatement("SELECT balance FROM students WHERE username = ?")) {
                 
                preparedStatement.setString(1, selectedStudent);
                ResultSet rs = preparedStatement.executeQuery();
                if (rs.next()) {
                    double balance = rs.getDouble("balance");
                    //JOptionPane.showMessageDialog(this, "Current Balance is ₹" + balance);
                    s1.setText("₹ "+balance);
                }
            } catch (Exception e1) {
                System.out.println(e1);
            }  
        } else {
            JOptionPane.showMessageDialog(this, "No student selected.");
        }
    }
    private void viewHistory() {
        if (selectedStudent != null) {
            StringBuilder studentList = new StringBuilder("ITEM \t PRICE \t QUANTITY \t AMOUNT \t TIME\n");
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                PreparedStatement preparedStatement1 = con.prepareStatement("SELECT * FROM purchasehistory WHERE adm_no = ?");
                preparedStatement1.setString(1, selectedStudent);
                ResultSet rs = preparedStatement1.executeQuery();
                while (rs.next()) {
                    studentList.append(rs.getString(2)).append("       ").append(rs.getInt(3)).append("               ")
                            .append(rs.getInt(4)).append("                ").append(rs.getInt(5)).append("           ")
                            .append(rs.getTime(6)).append("\n");
                }
                JOptionPane.showMessageDialog(this, studentList);
            } catch (Exception e1) {
                System.out.println(e1);
            }   
        } else {
            JOptionPane.showMessageDialog(this, "No student selected.");
        }
    }
    private void studentDetails()
    {
    	JFrame frame = new JFrame(selectedStudent);
    	details = new JPanel();
    	frame.setSize(1000, 800);
    	frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        details.setLayout(null);
        details.setBackground(new Color(100, 100, 100, 100));
        details.setPreferredSize(new Dimension(1050, 150));
        JLabel name = new JLabel("Name : ");
        name.setBounds(100, 100, 100, 30);
        name.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(name);
        JLabel admn_no = new JLabel("Admission number : ");
        admn_no.setBounds(100, 150, 200, 30);
        admn_no.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(admn_no);
        JLabel roll_no = new JLabel("Roll number : ");
        roll_no.setBounds(100, 200, 200, 30);
        roll_no.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(roll_no);
        JLabel mail = new JLabel("Mail ID : ");
        mail.setBounds(100, 250, 100, 30);
        mail.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(mail);
        setVisible(true);
        add(details, BorderLayout.EAST);
        ImageIcon image = new ImageIcon("photo.jpg");
        JLabel imgLabel = new JLabel(image);
        imgLabel.setBounds(650, 100, 100, 100);
        details.add(imgLabel);
        frame.add(details);
        frame.setVisible(true);
    }
    public void StudentPage()
    {
        frame = new JFrame("Student Page");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(1500, 1100);
        head = new JPanel();
        head.setLayout(null);
        head.setBackground(Color.ORANGE);
        head.setPreferredSize(new Dimension(1200, 150));
        JLabel header = new JLabel(" SNV Canteen ");
        header.setBounds(600, 0, 300, 100);
        header.setFont(new Font("Arial", Font.BOLD, 35));
        head.add(header);
        JLabel subheader = new JLabel("Created by 'Sujan', 'Pothiraju', 'Vigneshwaran'");
        subheader.setFont(new Font("Arial", Font.BOLD, 12));
        subheader.setBounds(600, 50, 300, 100);
        head.add(subheader);
        frame.add(head, BorderLayout.NORTH);
        //Student Menu Start
        menu = new JPanel();
        menu.setBackground(Color.gray);
        menu.setPreferredSize(new Dimension(500, 800));
        menu.setLayout(null);
        menu.setSize(500, 1000);
        menu.setLocation(0, 0);
        menu.setBackground(new Color(100, 100, 0, 100));
        JLabel studentDetails = new JLabel("Student Details");
        studentDetails.setBounds(120, 100, 200, 30);
        studentDetails.setFont(new Font("Arial", Font.BOLD, 20));
        studentDetails.setForeground(Color.BLUE);
        
        menu.add(studentDetails);
        JLabel R_history = new JLabel("Recharge History");
        R_history.setForeground(Color.BLUE);
        R_history.setBounds(120, 150, 200, 30);
        R_history.setFont(new Font("Arial", Font.BOLD, 20));
        
        //menu.add(R_history);
        JLabel P_history = new JLabel("Purchase History");
        P_history.setForeground(Color.BLUE);
        P_history.setBounds(120, 150, 200, 30);
        P_history.setFont(new Font("Arial", Font.BOLD, 20));
        menu.add(P_history);
        JLabel balance = new JLabel("Balance");
        balance.setForeground(Color.BLUE);
        balance.setBounds(120, 200, 200, 30);
        balance.setFont(new Font("Arial", Font.BOLD, 20));
        menu.add(balance);
        JLabel recharge = new JLabel("Recharge");
        recharge.setForeground(Color.BLUE);
        recharge.setBounds(120, 300, 200, 30);
        recharge.setFont(new Font("Arial", Font.BOLD, 20));
        //menu.add(recharge);
        frame.add(menu, BorderLayout.WEST);
        
        //Student Menu End
        //Student Details Start
        details = new JPanel();
        details.setLayout(null);
        details.setBackground(new Color(100, 100, 100, 100));
        details.setPreferredSize(new Dimension(1050, 150));
        JLabel name = new JLabel("Name : ");
        name.setBounds(100, 100, 100, 30);
        name.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(name);
        JLabel nameLabel = new JLabel();
        nameLabel.setBounds(200, 100, 100, 30);
        nameLabel.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(nameLabel);
        JLabel admn_no = new JLabel("Admission number : ");
        admn_no.setBounds(100, 150, 200, 30);
        admn_no.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(admn_no);
        JLabel admn_no_label = new JLabel();
        admn_no_label.setBounds(300, 150, 200, 30);
        admn_no_label.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(admn_no_label);
        JLabel roll_no = new JLabel("Roll number : ");
        roll_no.setBounds(100, 200, 200, 30);
        roll_no.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(roll_no);
        JLabel roll_no_Label = new JLabel();
        roll_no_Label.setBounds(250, 200, 200, 30);
        roll_no_Label.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(roll_no_Label);
        JLabel mail = new JLabel("Mail ID : ");
        mail.setBounds(100, 250, 100, 30);
        mail.setFont(new Font("Arial", Font.BOLD, 15));
        details.add(mail);
        try {
          	 Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
          	 String sql = "SELECT * FROM student_details WHERE adm_no = ?";
          	 PreparedStatement preparedStatement = con.prepareStatement(sql);
               preparedStatement.setString(1,selectedStudent);
               ResultSet rs = preparedStatement.executeQuery();
               
               while(rs.next()) {
               	JLabel x1 = new JLabel(rs.getString(1));
               	JLabel x2 = new JLabel(rs.getString(2));
               	JLabel x3 = new JLabel(rs.getString(3));
               	JLabel x4 = new JLabel(rs.getString(4));
               	x1.setFont(new Font("Arial", Font.BOLD, 15));
               	x2.setFont(new Font("Arial", Font.BOLD, 15));
               	x3.setFont(new Font("Arial", Font.BOLD, 15));
               	x4.setFont(new Font("Arial", Font.BOLD, 15));
               	x1.setBounds(300, 150, 300, 30);
               	x2.setBounds(300, 100, 300, 30);
               	x3.setBounds(300, 200, 300, 30);
               	x4.setBounds(300, 250, 300, 30);
               	details.add(x1);
               	details.add(x2);
               	details.add(x3);
               	details.add(x4);
               }
           }
          catch (Exception e){
          	JOptionPane.showMessageDialog(this, e);
          }
        setVisible(true);       
        ImageIcon image = new ImageIcon("photo.jpg");
        JLabel imgLabel = new JLabel(image);
        imgLabel.setBounds(650, 100, 100, 100);
        details.add(imgLabel);
        frame.add(details, BorderLayout.EAST);
        frame.setVisible(true);
        //Student Details End
        try {
        	 Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
        	 String sql = "SELECT * FROM student_details WHERE adm_no = ?";
        	 PreparedStatement preparedStatement = con.prepareStatement(sql);
             preparedStatement.setString(1,selectedStudent);
             ResultSet rs = preparedStatement.executeQuery();
        }
        catch (Exception e){
        	JOptionPane.showMessageDialog(this, e);
        }
        studentDetails.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) {
            	frame.remove(panel2);
            	frame.add(details, BorderLayout.EAST);
                details.setVisible(true);
                revalidate();
                repaint();
            }
        });
        R_history.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) {
                details.setVisible(false);
                JOptionPane.showMessageDialog(null, "Recharge history page is working");
                revalidate();
                repaint();
            }
        });
        P_history.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) {
                details.setVisible(false);
                viewPurchaseHistory();
                revalidate();
                repaint();
            }
        });
        balance.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) {
                details.setVisible(false);
                viewBalance();
                revalidate();
                repaint();
            }
        });
        recharge.addMouseListener(new MouseAdapter() 
        {
            public void mouseClicked(MouseEvent e) {
                details.setVisible(false);
                JOptionPane.showMessageDialog(null, "Recharge page is working");
                revalidate();
                repaint();
            }
        });
    }
    public void viewPurchaseHistory() {
    	String username = selectedStudent;
    	panel2 = new JPanel();
    	panel2.setLayout(null);
    	panel2.setBackground(new Color(100, 100, 100, 100));
    	panel2.setPreferredSize(new Dimension(1050, 150));
    	JTextArea purchasehistoryarea = new JTextArea();
    	purchasehistoryarea.setEditable(false);
    	purchasehistoryarea.setBounds(100, 100, 900, 500);
        if (selectedStudent != null) {
            StringBuilder studentList = new StringBuilder("\tITEM \t\t PRICE \t\t QUANTITY \t\t AMOUNT \t\t  TIME\n\n");
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                String sql = "SELECT * FROM purchasehistory WHERE adm_no = ?";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1,username);
                ResultSet rs = preparedStatement.executeQuery();
                while (rs.next()) {
                    studentList.append("	").append(rs.getString(2)).append("		").append(rs.getInt(3)).append("		")
                            .append(rs.getInt(4)).append("		").append(rs.getInt(5)).append("		")
                            .append(rs.getTime(6)).append("\n");
                }
                purchasehistoryarea.setText(studentList.toString());
                panel2.add(purchasehistoryarea);
                frame.remove(details);
                frame.add(panel2, BorderLayout.EAST);
                frame.setVisible(true);
                frame.repaint();
            } catch (Exception e1) {
                JOptionPane.showMessageDialog(this,e1);
            } 
        }
    }
    
}   
class WorkerModule extends JFrame {
    private JTextField studentUsernameField;
    private Student selectedStudent;

    public WorkerModule() {
        setTitle("Worker Module");
        setSize(500, 350);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLayout(null);
        setLocationRelativeTo(null);
        getContentPane().setBackground(new Color(204, 229, 255));

        Font font = new Font("Segoe UI", Font.BOLD, 14);

        JLabel selectStudentLabel = new JLabel("Enter Student Username:");
        selectStudentLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        selectStudentLabel.setBounds(50, 30, 180, 25);
        add(selectStudentLabel);

        studentUsernameField = new JTextField(15);
        studentUsernameField.setBounds(220, 30, 200, 25);
        studentUsernameField.setFont(font);
        add(studentUsernameField);

        JButton selectButton = createStyledButton("Select Student", font, 100, 70);
        selectButton.addActionListener(e -> selectStudent());
        add(selectButton);

        JButton viewBalanceButton = createStyledButton("View Student Balance", font, 100, 110);
        viewBalanceButton.addActionListener(e -> viewBalance());
        add(viewBalanceButton);

        JButton viewHistoryButton = createStyledButton("View Purchase History", font, 100, 150);
        viewHistoryButton.addActionListener(e -> viewPurchaseHistory());
        add(viewHistoryButton);

        JButton rechargeWalletButton = createStyledButton("Recharge Wallet", font, 100, 190);
        rechargeWalletButton.addActionListener(e -> rechargeWallet());
        add(rechargeWalletButton);

        JButton placeOrderButton = createStyledButton("Place Order", font, 100, 230);
        placeOrderButton.addActionListener(e -> placeOrder());
        add(placeOrderButton);

        setVisible(true);
    }

    private JButton createStyledButton(String text, Font font, int x, int y) {
        JButton button = new JButton(text);
        button.setFont(font);
        button.setBounds(x, y, 250, 35);
        button.setBackground(new Color(135, 206, 235)); // Light blue
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(new Color(70, 130, 180), 2, true));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setToolTipText("Click to " + text);
        return button;
    }

    private void selectStudent() {
        String username = studentUsernameField.getText().trim();
        selectedStudent = AdminModule.students.get(username);
        try {
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
            PreparedStatement preparedStatement = con.prepareStatement("SELECT * FROM students WHERE username = ?");
            preparedStatement.setString(1, username);
            ResultSet rs1 = preparedStatement.executeQuery();
            if (rs1.next()) {
                JOptionPane.showMessageDialog(this, "Student " + username + " selected.");
            } else {
                JOptionPane.showMessageDialog(this, "Student not found.");
            }
        } catch (Exception e1) {
            System.out.println(e1);
            JOptionPane.showMessageDialog(this, "Invalid Student username");
        }
    }
    
    private void viewBalance() {
        if (selectedStudent != null) {
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                String sql = "SELECT balance FROM students WHERE username = ?";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1, selectedStudent.username);
                ResultSet rs = preparedStatement.executeQuery();
                if (rs.next()) {
                    double balance = rs.getDouble("balance");
                    JOptionPane.showMessageDialog(this, "Current Balance is ₹" + balance);
                }
            } catch (Exception e1) {
                System.out.println(e1);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No student selected.");
        }
    }

    private void viewPurchaseHistory() {
        if (selectedStudent != null) {
            StringBuilder studentList = new StringBuilder("ITEM \t PRICE \t QUANTITY \t AMOUNT \t TIME\n");
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                String sql = "SELECT * FROM purchasehistory WHERE adm_no = ?";
                PreparedStatement preparedStatement = con.prepareStatement(sql);
                preparedStatement.setString(1, selectedStudent.username);
                ResultSet rs = preparedStatement.executeQuery();
                while (rs.next()) {
                    studentList.append(rs.getString(2)).append("       ").append(rs.getInt(3)).append("               ")
                            .append(rs.getInt(4)).append("                ").append(rs.getInt(5)).append("           ")
                            .append(rs.getTime(6)).append("\n");
                }
                JOptionPane.showMessageDialog(this, studentList);
            } catch (Exception e1) {
                System.out.println(e1);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No student selected.");
        }
    }

    private void rechargeWallet() {
    	double balance;
        if (selectedStudent != null) {
            String amountString = JOptionPane.showInputDialog("Enter amount to recharge:");
            if (amountString != null && !amountString.isEmpty()) {
                try {
                    double amount = Double.parseDouble(amountString);
                    try {
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                        String sql = "SELECT balance FROM students WHERE username = ?";
                        PreparedStatement preparedStatement = con.prepareStatement(sql);
                        preparedStatement.setString(1, selectedStudent.username);
                        ResultSet rs = preparedStatement.executeQuery();
                        if (rs.next()) {
                            balance = rs.getDouble("balance");
                            selectedStudent.walletBalance = balance + amount;
                        }
                    } catch (Exception e1) {
                        System.out.println(e1);
                    }

                    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                         PreparedStatement preparedStatement = con.prepareStatement("UPDATE students SET balance = ? WHERE username = ?")) {
                        preparedStatement.setDouble(1, selectedStudent.walletBalance);
                        preparedStatement.setString(2, selectedStudent.username);
                        int rowsAffected = preparedStatement.executeUpdate();
                    } catch (SQLException e5) {
						// TODO Auto-generated catch block
						e5.printStackTrace();
					}
                    JOptionPane.showMessageDialog(this, "Wallet recharged successfully! Current Balance: ₹" + selectedStudent.walletBalance);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid amount entered!");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student first.");
        }
    }

    private void placeOrder() {
        if (selectedStudent != null) {
            new Cms(selectedStudent); 
        } else {
            JOptionPane.showMessageDialog(this, "Please select a student first.");
        }
    }
}
class Cms extends JFrame implements ActionListener {                                                                                                                                    
    Date date = new Date();                                                                                                                                                             

    JLabel lmenu, l4, l5, l6;                                                                                                                                                           
    JTextArea Menu;                                                                                                                                                                     
    JTextField quantityField, totalField;                                                                                                                                               
    JButton addButton, calculateButton, resetButton, removeItemButton, clearBillButton, checkoutButton;                                                                                 
    JTextArea billArea;                                                                                                                                                                 
    private Student student;                                                                                                                                                            

    JLabel l1, l2, l3;                                                                                                                                                                                                                                                                                                            
    double totalAmount = 0;                                                                                                                                                             

    JComboBox<String> itemComboBox;                                                                                                                                                     

    public Cms(Student student) {                                                                                                                                                       
        this.student = student;                                                                                                                                                         

        // Set up frame properties                                                                                                                                                      
        setTitle("Canteen Management System");                                                                                                                                          
        setSize(1400, 1000);                                                                                                                                                            
        setLayout(null);                                                                                                                                                                
        getContentPane().setBackground(new Color(240, 248, 255));                                                                                                                       
        setVisible(true);                                                                                                                                                               

        Font labelFont = new Font("Arial", Font.BOLD, 14);                                                                                                                              
        Font buttonFont = new Font("Arial", Font.PLAIN, 16);                                                                                                                            

        l1 = new JLabel("Quantity");                                                                                                                                                    
        l1.setFont(labelFont);                                                                                                                                                          
        l1.setBounds(60, 400, 100, 30);                                                                                                                                                 
        add(l1);                                                                                                                                                                        
        quantityField = new JTextField(20);                                                                                                                                             
        quantityField.setBounds(150, 400, 200, 30);                                                                                                                                     
        add(quantityField);                                                                                                                                                             

        l2 = new JLabel("Select Item");                                                                                                                                                 
        l2.setFont(labelFont);                                                                                                                                                          
        l2.setBounds(60, 450, 100, 30);                                                                                                                                                 
        add(l2);                                                                                                                                                                        

        itemComboBox = new JComboBox<>(AdminModule.menu.keySet().toArray(new String[0]));                                                                                               
        itemComboBox.setBounds(150, 450, 200, 30);                                                                                                                                      
        add(itemComboBox);                                                                                                                                                              

        addButton = new JButton("Add Item");                                                                                                                                            
        addButton.setFont(buttonFont);                                                                                                                                                  
        addButton.addActionListener(this);                                                                                                                                              
        addButton.setBounds(150, 500, 200, 30);                                                                                                                                         
        add(addButton);                                                                                                                                                                 

        l3 = new JLabel("Current Orders");                                                                                                                                              
        l3.setFont(labelFont);                                                                                                                                                          
        l3.setBounds(700, 90, 150, 30);                                                                                                                                                 
        add(l3);                                                                                                                                                                        

        billArea = new JTextArea(10, 40);                                                                                                                                               
        billArea.setBounds(700, 120, 300, 200);                                                                                                                                         
        billArea.setEditable(false);                                                                                                                                                    
        billArea.setFont(new Font("Monospaced", Font.PLAIN, 12));                                                                                                                       
        billArea.setBackground(new Color(255, 255, 255));                                                                                                                               
        billArea.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));                                                                                                              
        add(billArea);                                                                                                                                                                  

        removeItemButton = new JButton("Remove Item");                                                                                                                                  
        removeItemButton.setFont(buttonFont);                                                                                                                                           
        removeItemButton.addActionListener(this);                                                                                                                                       
        removeItemButton.setBounds(750, 350, 200, 30);                                                                                                                                  
        add(removeItemButton);                                                                                                                                                          

        calculateButton = new JButton("Calculate Bill");                                                                                                                                
        calculateButton.setFont(buttonFont);                                                                                                                                            
        calculateButton.addActionListener(this);                                                                                                                                        
        calculateButton.setBounds(750, 500, 250, 40);                                                                                                                                   
        add(calculateButton);                                                                                                                                                           

        clearBillButton = new JButton("Clear Bill");                                                                                                                                    
        clearBillButton.setFont(buttonFont);                                                                                                                                            
        clearBillButton.addActionListener(this);                                                                                                                                        
        clearBillButton.setBounds(650, 400, 150, 30);                                                                                                                                   
        add(clearBillButton);                                                                                                                                                           

        resetButton = new JButton("Reset");                                                                                                                                             
        resetButton.setFont(buttonFont);                                                                                                                                                
        resetButton.addActionListener(this);                                                                                                                                            
        resetButton.setBounds(950, 400, 150, 30);                                                                                                                                       
        add(resetButton);                                                                                                                                                               

        l5 = new JLabel("Total Amount");                                                                                                                                                
        l5.setFont(labelFont);                                                                                                                                                          
        l5.setBounds(700, 600, 100, 30);                                                                                                                                                
        add(l5);                                                                                                                                                                        
        totalField = new JTextField(20);                                                                                                                                                
        totalField.setEditable(false);                                                                                                                                                  
        totalField.setBounds(800, 600, 200, 30);                                                                                                                                        
        add(totalField);                                                                                                                                                                

        lmenu = new JLabel("MENU");                                                                                                                                                     
        lmenu.setFont(new Font("Arial", Font.BOLD, 16));                                                                                                                                
        lmenu.setBounds(60, 50, 250, 30);                                                                                                                                               
        add(lmenu);                                                                                                                                                                     

        Menu = new JTextArea("");                                                                                                                                                       
        Menu.setEditable(false);                                                                                                                                                        
        Menu.setBounds(60, 90, 500, 250);                                                                                                                                               
        Menu.setText("Items\t\t\t\tPrice\n\nVada\t\t\t\t8\n\nBajji\t\t\t\t10\n\nVeg-puff \t\t\t\t15\n\nEgg-puff\t\t\t\t20\n\nChicken-puff\t\t\t25\n\nMilkshake\t\t\t35");               
        Menu.setFont(new Font("Monospaced", Font.PLAIN, 12));                                                                                                                           
        Menu.setBackground(new Color(255, 255, 255));                                                                                                                                   
        Menu.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));                                                                                                                  
        add(Menu);                                                                                                                                                                      

        checkoutButton = new JButton("CheckOut");                                                                                                                                       
        checkoutButton.setFont(buttonFont);                                                                                                                                             
        checkoutButton.addActionListener(this);                                                                                                                                         
        checkoutButton.setBounds(1000, 750, 300, 50);                                                                                                                                   
        add(checkoutButton);                                                                                                                                                            

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);                                                                                                                                     
    }                                                                                                                                                                                   

    @Override                                                                                                                                                                           
    public void actionPerformed(ActionEvent e) {                                                                                                                                        
        String command = e.getActionCommand();                                                                                                                                          

        if (command.equals("Add Item")) {                                                                                                                                               
            String itemName = (String) itemComboBox.getSelectedItem();                                                                                                                  
            String quantityText = quantityField.getText();                                                                                                                              

            if (!itemName.equals("Select an Item") && AdminModule.menu.containsKey(itemName)) {                                                                                         
                double price = AdminModule.menu.get(itemName);                                                                                                                          
                int quantity = Integer.parseInt(quantityText);                                                                                                                          
                double totalItemPrice = price * quantity;                                                                                                                               
                totalAmount += totalItemPrice;                                                                                                                                          
                billArea.append(itemName + " x " + quantity + " = ₹" + totalItemPrice + "\n");                                                                                          
                StringBuilder studentList = new StringBuilder("\n");                                                                                                                    
                try {                                                                                                                                                                   
                    Class.forName("com.mysql.jdbc.Driver");                                                                                                                             
                    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");                                                       
                         PreparedStatement preparedStatement = con.prepareStatement("INSERT INTO purchasehistory (adm_no,item,price,quantity,amount,time) VALUES (?, ?, ?, ?, ?, ?)")) {
                        preparedStatement.setString(1, student.username);                                                                                                               
                        preparedStatement.setString(2, itemName);                                                                                                                       
                        preparedStatement.setDouble(3, price);                                                                                                                          
                        preparedStatement.setDouble(4, quantity);                                                                                                                       
                        preparedStatement.setDouble(5, totalItemPrice);                                                                                                                 
                        Time eventTime = new Time(System.currentTimeMillis());                                                                                                          
                        preparedStatement.setTime(6, eventTime);                                                                                                                        
                        int rowsAffected = preparedStatement.executeUpdate();                                                                                                           
                    }                                                                                                                                                                   
                } catch (Exception e3) {                                                                                                                                                
                    System.out.println(e3);                                                                                                                                             
                }                                                                                                                                                                       
            } else {                                                                                                                                                                    
                JOptionPane.showMessageDialog(Cms.this, "Please select a valid item and enter quantity", "Invalid Order", JOptionPane.QUESTION_MESSAGE);                                
            }                                                                                                                                                                           
        } else if (command.equals("Remove Item")) {                                                                                                                                     
            String itemName = (String) itemComboBox.getSelectedItem();                                                                                                                  
            String quantityText = quantityField.getText();                                                                                                                              

            if (AdminModule.menu.containsKey(itemName)) {                                                                                                                               
                double price = AdminModule.menu.get(itemName);                                                                                                                          
                int quantity = Integer.parseInt(quantityText);                                                                                                                          
                double totalItemPrice = price * quantity;                                                                                                                               
                totalAmount -= totalItemPrice;                                                                                                                                          
                billArea.append("Removed: " + itemName + " x " + quantity + "\n");                                                                                                      
            } else {                                                                                                                                                                    
                JOptionPane.showMessageDialog(Cms.this, "Item not found", "Invalid Order", JOptionPane.QUESTION_MESSAGE);                                                               
            }                                                                                                                                                                           
        } else if (command.equals("Calculate Bill")) {                                                                                                                                  
            totalField.setText(String.valueOf(totalAmount));                                                                                                                            
        } else if (command.equals("Clear Bill")) {                                                                                                                                      
            totalField.setText("");                                                                                                                                                     
            billArea.setText("");                                                                                                                                                       
            totalAmount = 0;                                                                                                                                                            
        } else if (command.equals("Reset")) {                                                                                                                                           
            quantityField.setText("");                                                                                                                                                  
            billArea.setText("");                                                                                                                                                       
            totalField.setText("");                                                                                                                                                     
            totalAmount = 0;                                                                                                                                                            
            itemComboBox.setSelectedIndex(0);                                                                                                                                           
        } else if (command.equals("CheckOut")) {                                                                                                                                        
            if (totalAmount != 0) {                                                                                                                                                     
                if (student.walletBalance >= totalAmount) {                                                                                                                             
                    student.walletBalance -= totalAmount;                                                                                                                               
                    student.purchaseHistory.add("Order placed with total: ₹" + totalAmount);                                                                                            
                    JOptionPane.showMessageDialog(this, "Order placed successfully! Remaining Balance: ₹" + student.walletBalance);                                                     
                    billArea.setText("");                                                                                                                                               
                    totalAmount = 0;                                                                                                                                                    
                    totalField.setText("");                                                                                                                                             
                    try {                                                                                                                                                               
                        Class.forName("com.mysql.jdbc.Driver");                                                                                                                         
                        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");                                                   
                             PreparedStatement preparedStatement = con.prepareStatement("UPDATE students SET balance = ? WHERE username = ?")) {                                        

                            preparedStatement.setDouble(1, student.walletBalance);                                                                                                      
                            preparedStatement.setString(2, student.username);                                                                                                           
                            int rowsAffected = preparedStatement.executeUpdate();                                                                                                       
                        }                                                                                                                                                               
                    } catch (Exception e4) {                                                                                                                                            
                        System.out.println(e4);                                                                                                                                         
                    }                                                                                                                                                                   
                } else {                                                                                                                                                                
                    JOptionPane.showMessageDialog(this, "Insufficient balance!", "Checkout Error", JOptionPane.WARNING_MESSAGE);                                                        
                }                                                                                                                                                                       
            } else {                                                                                                                                                                    
                JOptionPane.showMessageDialog(this, "No items added to order!", "Checkout Error", JOptionPane.WARNING_MESSAGE);                                                         
            }                                                                                                                                                                           
        }                                                                                                                                                                               
    }                                                                                                                                                                                   
}                                                                                                                                                                                       
	class ManageMenu extends JFrame implements ActionListener {
	    private JComboBox<String> itemComboBox;
	    private JTextField addItemField;
	    private JTextField addPriceField;
	    private JTextField updatePriceField;
	    private HashMap<String, Double> menu;
	
	    public ManageMenu(HashMap<String, Double> menu) {
	        this.menu = menu;
	
	        setTitle("Manage Menu");
	        setSize(425, 300);
	        setLayout(null);
	        setLocationRelativeTo(null);
	        
	        // Initialize components
	        JLabel itemLabel = new JLabel("Select Item to Update:");
	        itemLabel.setBounds(20, 20, 160, 25);
	        add(itemLabel);
	        
	        itemComboBox = new JComboBox<>(menu.keySet().toArray(new String[0]));
	        itemComboBox.setBounds(180, 20, 200, 25);
	        add(itemComboBox);
	        
	        JLabel updatePriceLabel = new JLabel("Update Price:");
	        updatePriceLabel.setBounds(20, 60, 120, 25);
	        add(updatePriceLabel);
	        
	        updatePriceField = new JTextField();
	        updatePriceField.setBounds(180, 60, 200, 25);
	        add(updatePriceField);
	        
	        JButton updateButton = new JButton("Update Item");
	        updateButton.setBounds(20, 100, 150, 30);
	        updateButton.addActionListener(this);
	        add(updateButton);
	        
	        JLabel addItemLabel = new JLabel("Add New Item:");
	        addItemLabel.setBounds(20, 140, 150, 25);
	        add(addItemLabel);
	        
	        addItemField = new JTextField();
	        addItemField.setBounds(150, 140, 100, 25);
	        add(addItemField);
	        
	        JLabel addPriceLabel = new JLabel("Price:");
	        addPriceLabel.setBounds(290, 140, 50, 25);
	        add(addPriceLabel);
	        
	        addPriceField = new JTextField();
	        addPriceField.setBounds(340, 140, 50, 25);
	        add(addPriceField);
	        
	        JButton addButton = new JButton("Add Item");
	        addButton.setBounds(20, 180, 150, 30);
	        addButton.addActionListener(this);
	        add(addButton);
	        
	        JButton removeButton = new JButton("Remove Item");
	        removeButton.setBounds(200, 180, 150, 30);
	        removeButton.addActionListener(this);
	        add(removeButton);
	        
	        setVisible(true);
	        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
	    }
	
	    @Override
	    public void actionPerformed(ActionEvent e) {
	        String command = e.getActionCommand();
	        String selectedItem = (String) itemComboBox.getSelectedItem();
	        String updatePriceText = updatePriceField.getText();
	        String newItemText = addItemField.getText();
	        String newItemPriceText = addPriceField.getText();
	
	        if (command.equals("Update Item")) {
	            if (selectedItem != null && !updatePriceText.isEmpty()) {
	                try {
	                    double price = Double.parseDouble(updatePriceText);
	                    menu.put(selectedItem, price);
	                    JOptionPane.showMessageDialog(this, "Item updated: " + selectedItem + " - ₹" + price);
	                    itemComboBox.setModel(new DefaultComboBoxModel<>(menu.keySet().toArray(new String[0])));
	                    try {
	                            Class.forName("com.mysql.cj.jdbc.Driver");
	                            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
	                                 PreparedStatement preparedStatement = con.prepareStatement("UPDATE menuitems SET price = ? WHERE items = ?")) {
	                                
	                                preparedStatement.setDouble(1, Double.parseDouble(updatePriceText));
	                                preparedStatement.setString(2, selectedItem);
	                                int rowsAffected = preparedStatement.executeUpdate();
	                            }
	                    } catch (Exception e4) {
	                        System.out.println(e4);
	                        System.out.println(e4.getMessage());
	                    }
	                } catch (NumberFormatException ex) {
	                    JOptionPane.showMessageDialog(this, "Invalid price entered!", "Error", JOptionPane.ERROR_MESSAGE);
	                }
	            } else {
	                JOptionPane.showMessageDialog(this, "Please select an item and enter a price!", "Error", JOptionPane.ERROR_MESSAGE);
	            }
	        } else if (command.equals("Add Item")) {
	            if (!newItemText.isEmpty() && !newItemPriceText.isEmpty()) {
	                try {
	                    double price = Double.parseDouble(newItemPriceText);
	                    menu.put(newItemText, price);
	                    JOptionPane.showMessageDialog(this, "Item added: " + newItemText + " - ₹" + price);
	                    itemComboBox.setModel(new DefaultComboBoxModel<>(menu.keySet().toArray(new String[0])));
	                    try {
	                        Class.forName("com.mysql.cj.jdbc.Driver");
	                        try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
	                        		PreparedStatement preparedStatement = con.prepareStatement("INSERT INTO menuitems (items, price) VALUES (?, ?)")) {
	                            
	                            preparedStatement.setDouble(2, Double.parseDouble(newItemPriceText));
	                            preparedStatement.setString(1, newItemText);
	                            int rowsAffected = preparedStatement.executeUpdate();
	                           // studentList.append(rowsAffected).append(" row(s) updated.");
	                        }
	                } catch (Exception e4) {
	                    System.out.println(e4);
	                    System.out.println(e4.getMessage());
	                }
	                } catch (NumberFormatException ex) {
	                    JOptionPane.showMessageDialog(this, "Invalid price entered!", "Error", JOptionPane.ERROR_MESSAGE);
	                }
	            } else {
	                JOptionPane.showMessageDialog(this, "Please enter an item and a price!", "Error", JOptionPane.ERROR_MESSAGE);
	            }
	        } else if (command.equals("Remove Item")) {
	            if (selectedItem != null) {
	                menu.remove(selectedItem);
	                JOptionPane.showMessageDialog(this, "Item removed: " + selectedItem);
	                itemComboBox.setModel(new DefaultComboBoxModel<>(menu.keySet().toArray(new String[0])));
	                try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
	                        PreparedStatement pstmt = conn.prepareStatement("DELETE FROM menuitems WHERE items = ?")) {
	                       
	                       //String x = rmAdmField.getText();
	                   	
	                       
	                           pstmt.setString(1, selectedItem);    
	                           int rowsAffected = pstmt.executeUpdate();
	                           //studentList.append(rowsAffected > 0 ? 
	                         //      rowsAffected + " record(s) deleted successfully." : "No records found with the ID: " + Integer.parseInt(x));
	     
	                   } catch (SQLException e2) {
	                       System.out.println(e2);
	                       System.out.println(e2.getMessage());
	                   }
	            }
	        }
	    }
	}
class AdminModuleGUI extends JFrame {
	JPanel head, left, main;
    public AdminModuleGUI() {
    	setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(1200, 800);
        head = new JPanel();
        head.setLayout(null);
        head.setBackground(Color.ORANGE);
        head.setPreferredSize(new Dimension(1200, 150));
        JLabel headerlabel = new JLabel("SNV Canteen");
        headerlabel.setFont(new Font("Arial", Font.BOLD, 45));
        headerlabel.setBounds(535, 35, 500, 50);
        head.add(headerlabel);
        JLabel subheaderlabel = new JLabel("Created by Sujan, Pothiraju, Vigneshwaran");
        subheaderlabel.setFont(new Font("Arial", Font.BOLD, 15));
        subheaderlabel.setBounds(525, 85, 500, 50);
        head.add(subheaderlabel);
        ImageIcon imagelabel = new ImageIcon("logo.png");
        JLabel logolabel = new JLabel(imagelabel);
        logolabel.setBounds(700, 50, 100, 50);
        head.add(logolabel);
        JLabel logout = new JLabel("Logout");
        logout.setBounds(10, 100, 100, 30);
        logout.setForeground(Color.BLUE);
        logout.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                new LoginPage();
                dispose();
            }
        });
        head.add(logout);
        add(head, BorderLayout.NORTH);
        left = new JPanel();
        left.setLayout(null);
        left.setBackground(Color.GRAY);
        left.setPreferredSize(new Dimension(500, 650));
        add(left, BorderLayout.WEST);
        main = new JPanel();
        main.setLayout(null);
        main.setBackground(Color.LIGHT_GRAY);
        main.setPreferredSize(new Dimension(1050, 650));
        add(main, BorderLayout.EAST);
        JLabel addStudent = new JLabel("Add Student");
        addStudent.setBounds(120, 100, 200, 30);
        addStudent.setFont(new Font("Arial", Font.BOLD, 20));
        addStudent.setForeground(Color.BLUE);
        addStudent.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                addStudent();
            }
        });
        left.add(addStudent);
        JLabel removeStudent = new JLabel("Remove Student");
        removeStudent.setBounds(120, 200, 200, 30);
        removeStudent.setFont(new Font("Arial", Font.BOLD, 20));
        removeStudent.setForeground(Color.BLUE);
        removeStudent.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                removeStudent();
            }
        });
        left.add(removeStudent);
        JLabel manageMenu = new JLabel("Manage menu");
        manageMenu.setBounds(120, 300, 200, 30);
        manageMenu.setFont(new Font("Arial", Font.BOLD, 20));
        manageMenu.setForeground(Color.BLUE);
        manageMenu.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                manageMenu();
            }
        });
        left.add(manageMenu);
        JLabel registeredStudent = new JLabel("Registered Student");
        registeredStudent.setBounds(120, 400, 200, 30);
        registeredStudent.setFont(new Font("Arial", Font.BOLD, 20));
        registeredStudent.setForeground(Color.BLUE);
        registeredStudent.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                availableStudents();
            }
        });
        left.add(registeredStudent);
        JLabel viewStudent = new JLabel("View Student");
        viewStudent.setBounds(120, 500, 200, 30);
        viewStudent.setFont(new Font("Arial", Font.BOLD, 20));
        viewStudent.setForeground(Color.BLUE);
        viewStudent.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e)
            {
                viewStudentModule();
            }
        });
        left.add(viewStudent);
        left.add(removeStudent);
        setVisible(true);
    }
    private JButton createStyledButton(String text, Font font) {
        JButton button = new JButton(text);
        button.setFont(font);
        button.setPreferredSize(new Dimension(250, 40));
        button.setBackground(new Color(135, 206, 235)); 
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createLineBorder(new Color(70, 130, 180), 2, true));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setToolTipText("Click to " + text);
        return button;
    }
    private void addStudent() {
    	{
            main.setVisible(false);
            revalidate();
            repaint();
            JPanel registered_panel = new JPanel();
            registered_panel.setPreferredSize(new Dimension(1050, 650));
            registered_panel.setLayout(null);
            registered_panel.setBackground(new Color(100, 100, 100, 100));
            JLabel username = new JLabel("Enter Name ");
            username.setFont(new Font("Arial", Font.PLAIN, 25));
            username.setBounds(100, 100, 200, 30);
            registered_panel.add(username);
            JTextField userfield = new JTextField();
            userfield.setFont(new Font("Arial", Font.PLAIN, 25));
            userfield.setBounds(400, 100, 500, 30);
            registered_panel.add(userfield);
            JLabel admn_no = new JLabel("Enter Username ");
            admn_no.setFont(new Font("Arial", Font.PLAIN, 25));
            admn_no.setBounds(100, 200, 300, 30);
            registered_panel.add(admn_no);
            JTextField admField = new JTextField();
            admField.setFont(new Font("Arial", Font.PLAIN, 25));
            admField.setBounds(400, 200, 500, 30);
            registered_panel.add(admField);
            JLabel password = new JLabel("Enter Password ");
            password.setFont(new Font("Arial", Font.PLAIN, 25));
            password.setBounds(100, 300, 300, 30);
            registered_panel.add(password);
            JTextField passField = new JTextField();
            passField.setFont(new Font("Arial", Font.PLAIN, 25));
            passField.setBounds(400, 300, 500, 30);
            registered_panel.add(passField);
            JLabel initialBalance = new JLabel("Enter Initial balance ");
            initialBalance.setFont(new Font("Arial", Font.PLAIN, 25));
            initialBalance.setBounds(100, 400, 300, 30);
            registered_panel.add(initialBalance);
            JTextField initialBalanceField = new JTextField();
            initialBalanceField.setFont(new Font("Arial", Font.PLAIN, 25));
            initialBalanceField.setBounds(400, 400, 500, 30);
            registered_panel.add(initialBalanceField);
            JButton register = new JButton("Register");
            register.setBounds(300, 500, 200, 30);
            register.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e)
                {
                	String name = userfield.getText();
                    String username = admField.getText();
                    String password =  passField.getText();
                    double initialBalance = Double.parseDouble(initialBalanceField.getText());
                    try {
                        AdminModule.students.put(username, new Student(username, password, name, initialBalance));
                        try  {
                        	if(!username.isEmpty()) {
                        		Class.forName("com.mysql.cj.jdbc.Driver");
                        		try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                        				PreparedStatement preparedStatement = con.prepareStatement("INSERT INTO students (username,password,name,balance) VALUES (?, ?, ?, ?)")) {
                            
                        			preparedStatement.setString(1, username);
                        			preparedStatement.setString(2, password);
                        			preparedStatement.setString(3, name);
                        			preparedStatement.setDouble(4, initialBalance);
                        			int rowsAffected = preparedStatement.executeUpdate();
                                    JOptionPane.showMessageDialog(AdminModuleGUI.this, "Student added successfully!");
                        			userfield.setText("");
                        			admField.setText("");
                        			passField.setText("");
                        			initialBalanceField.setText("");
                        		}
                        	}
                        } catch (Exception e3) {
                        	JOptionPane.showMessageDialog(register, e3);
                        }
                    } catch (NumberFormatException e2) {
                        JOptionPane.showMessageDialog(AdminModuleGUI.this, "Invalid balance entered.");
                    }
                }
            });
            registered_panel.add(register);
            add(registered_panel, BorderLayout.EAST);
            revalidate();
            repaint();
    	}
    }
    private void removeStudent() {
        String username = JOptionPane.showInputDialog("Enter student's username to remove:");
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                 PreparedStatement pstmt = conn.prepareStatement("DELETE FROM students WHERE username = ?")) {
                
                 pstmt.setString(1, username);    
                 pstmt.executeUpdate();
            } catch (SQLException e2) {
                System.out.println(e2);
                JOptionPane.showMessageDialog(AdminModuleGUI.this, "Student not found.");
            }
            JOptionPane.showMessageDialog(AdminModuleGUI.this, "Student removed successfully!");
        }
    private void manageMenu() {
        new ManageMenu(AdminModule.menu);
    }
    private void availableStudents() {
    	main.removeAll();
        StringBuilder studentList = new StringBuilder("Registered Students:\n");
        JTextArea availableStudent = new JTextArea();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
            Statement smt = con.createStatement();
            ResultSet rs = smt.executeQuery("select * from students");
            availableStudent.setBounds(200, 100, 500, 500);
            availableStudent.setFont(new Font("DialogInput", Font.BOLD, 25));
            availableStudent.setEditable(false);
            while (rs.next()) {
                studentList.append(rs.getString(1)).append(" - ").append(rs.getString(3)).append("\n");
            }
        } catch (Exception e1) {
            System.out.println(e1);
        }
        main.removeAll();
        main.revalidate();
        main.repaint();
        availableStudent.setText(studentList.toString());
        main.add(availableStudent);
        main.revalidate();
        main.repaint();
    }
    private void viewStudentModule() {
        String username = JOptionPane.showInputDialog("Enter student's username to access module:");
        try{
        	main.removeAll();
            main.setVisible(false);
            revalidate();
            repaint();
            main.add(new StudentModule(username));
            main.setVisible(true);
            revalidate();
            repaint();
        } catch (Exception e3){
        	System.out.println(e3);
            JOptionPane.showMessageDialog(AdminModuleGUI.this, "Student not found.");
        }
    }
}
class LoginPage extends JFrame {
    public LoginPage() {
        setTitle("Login Page");	
        setSize(450, 325);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(null);
        getContentPane().setBackground(new Color(240, 248, 255));
        Font labelFont = new Font("Arial", Font.BOLD, 14);
        Font buttonFont = new Font("Arial", Font.PLAIN, 16);
        JLabel userLabel = new JLabel("Username:");
        userLabel.setFont(labelFont);
        userLabel.setBounds(50, 50, 100, 25);
        add(userLabel);
        JTextField userText = new JTextField();
        userText.setBounds(150, 50, 200, 25);
        userText.setFont(new Font("Arial", Font.PLAIN, 14));
        add(userText);
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setFont(labelFont);
        passwordLabel.setBounds(50, 100, 100, 25);
        add(passwordLabel);
        JPasswordField passwordText = new JPasswordField();
        passwordText.setBounds(150, 100, 200, 25);
        passwordText.setFont(new Font("Arial", Font.PLAIN, 14));
        add(passwordText);
        JButton loginButton = new JButton("Login");
        loginButton.setFont(buttonFont);
        loginButton.setBounds(150, 150, 120, 30);
        loginButton.setBackground(new Color(173, 216, 230)); 
        loginButton.setFocusPainted(false);
        loginButton.addActionListener(e -> {
            String username = userText.getText();
            String password = new String(passwordText.getPassword());
            Student selectedStudent = AdminModule.students.get(username);
            if (username.equals("worker") && password.equals("worker")) {
                new WorkerModule();
                dispose();
            } 
            else if (username.equals("admin") && password.equals("admin")) {
                new AdminModuleGUI();
                dispose();
            }
            else {
            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo1", "root", "humaira146");
                PreparedStatement preparedStatement = con.prepareStatement("SELECT * FROM students WHERE username = ?");
                preparedStatement.setString(1, username);
                ResultSet rs1 = preparedStatement.executeQuery();
                while(rs1.next()) {
                String st =(rs1.getString(2));
                if (username != null && password.equals(st)) {
                    new StudentModule(username).StudentPage();
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid credentials", "Login Error", JOptionPane.ERROR_MESSAGE);
                }
                }
            } catch (Exception e1) {
                System.out.println(e1);
                JOptionPane.showMessageDialog(this, "Invalid Student username");      
            } 
        }
        });
        add(loginButton);
        setLocationRelativeTo(null);
        setVisible(true);
    }
}
public class CanteenManagementSystem {
    public static void main(String[] args) {
        new LoginPage();
    }
}
